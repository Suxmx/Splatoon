#pragma kernel CSMain

struct PixelInfo
{
    float4 MainColor;
    int ColorType;
};

struct DebugInfo
{
    int Index;
    int addx;
    int addy;
    int idx;
    int idy;
    float u;
    float v;
};

//在创建时设置
int objPixelWidth;
int objPixelHeight;
//每帧设置
Texture2D drawTexture;
float4 drawMiddlePixelAddress;
int drawWidth;
int drawHeight;
int drawColorType;


StructuredBuffer<float4> ColorConstants : register(t0);
RWStructuredBuffer<DebugInfo> debugInfos;
RWStructuredBuffer<PixelInfo> pixelArray;
RWStructuredBuffer<int> colorCountBuffer : register(u1);

[numthreads(4,4,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int2 pixelAddress = int2(id.x - drawWidth / 2, id.y - drawHeight / 2) + drawMiddlePixelAddress.xy;
    int2 uv = int2(id.x, id.y);
    float2 fuv = float2(1.0f * id.x / drawWidth, 1.0f * id.y / drawHeight);
    int index = (pixelAddress.y) * objPixelWidth + pixelAddress.x;
    if (pixelAddress.x >= 0 && pixelAddress.x < objPixelWidth && pixelAddress.y >= 0
        && pixelAddress.y < objPixelHeight)
    {
        float4 sampleColor = float4(drawTexture[1 * (uv.xy)]);
        float4 originalColor = pixelArray[index].MainColor;
        if (sampleColor.a > 0.2f)
        {
            int pixelColor = pixelArray[index].ColorType;
            if (pixelColor != drawColorType)
            {
                InterlockedAdd(colorCountBuffer[pixelColor], -1);
                InterlockedAdd(colorCountBuffer[drawColorType], 1);
                pixelArray[index].ColorType = drawColorType;
            }
            sampleColor.a = (0.5f - sqrt(pow(fuv.x - 0.5f, 2) + pow(fuv.y - 0.5f, 2))) / 0.5f;
            sampleColor.a = sampleColor.a < 0 ? 0 : sampleColor.a;
            if (sampleColor.a < 0.3f)
            {
                sampleColor.a = pow(sampleColor.a, 3);
                // sampleColor = float4(0, 0, 0, sampleColor.a);
            }
            else
            {
                sampleColor.a = 1;
            }

            pixelArray[index].MainColor = sampleColor.a > originalColor.a || pixelColor != drawColorType
                                              ? sampleColor
                                              : originalColor;  
        }
    }
}
