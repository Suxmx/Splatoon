#pragma kernel CSMain

struct PixelInfo
{
    uint Color;
};

// struct DebugInfo
// {
//     int idx;
//     int idy;
//     int pixelColor;
//     int drawColor;
//     int cnta;
//     int cntb;
// };

//在创建时设置
int objPixelWidth;
int objPixelHeight;
//每帧设置
Texture2D drawTexture;
float4 drawMiddlePixelAddress;
uint drawWidth;
uint drawHeight;
int drawColorType;
//成功绘制的数量
RWStructuredBuffer<int> drawCount;

// RWStructuredBuffer<DebugInfo> debugInfos;
RWStructuredBuffer<PixelInfo> pixelArray;
RWStructuredBuffer<int> colorCounts : register(u1);

[numthreads(4,4,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int2 pixelAddress = int2(id.x - drawWidth / 2, id.y - drawHeight / 2) + drawMiddlePixelAddress.xy;
    int2 addressInTexture = int2(id.x, id.y);
    // float2 fuv = float2(1.0f * id.x / drawWidth, 1.0f * id.y / drawHeight);
    int index = (pixelAddress.y) * objPixelWidth + pixelAddress.x;
    if (pixelAddress.x >= 0 && pixelAddress.x < objPixelWidth && pixelAddress.y >= 0
        && pixelAddress.y < objPixelHeight)
    {
        float4 sampleColor = float4(drawTexture[1 * (addressInTexture.xy)]);

        int pixelColor = pixelArray[index].Color;
        if (pixelColor != drawColorType)
        {
            InterlockedAdd(colorCounts[pixelColor], -1);
            InterlockedAdd(colorCounts[drawColorType], 1);
            pixelArray[index].Color = drawColorType;
            InterlockedAdd(drawCount[0], 1);
        }
    }
}
